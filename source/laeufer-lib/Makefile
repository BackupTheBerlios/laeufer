#############################################################################

# Makefile for building liblaeufer.so
# Generated by tmake at 18:53, 2002/04/05
#     Project: liblaeufer
#    Template: app
#############################################################################

####### Compiler, tools and options

QTDIR	=	/usr
CC	=	gcc
CXX	=	g++
CFLAGS	=	-pipe -Wall -W -O2 -fPIC -DNO_DEBUG
CXXFLAGS=	-pipe -Wall -W -O2 -fPIC -DNO_DEBUG
INCPATH	=	-I$(QTDIR)/include/qt
LINK	=	g++
LFLAGS	=	-shared
LIBS	=	$(SUBLIBS) -L$(QTDIR)/lib -L/usr/X11R6/lib -lqt -lXext -lX11 -lm
MOC	=	$(QTDIR)/bin/moc
UIC	=	$(QTDIR)/bin/uic

TAR	=	tar -cf
GZIP	=	gzip -9f

####### Files

HEADERS =	bus.h \
		bus_manager.h \
		driver.h \
		include.h \
		message.h \
		message_dispatcher.h \
		notifier.h
SOURCES =	bus_manager.cc \
		driver.cc \
		message.cc \
		message_dispatcher.cc \
		notifier.cc
OBJECTS =	bus_manager.o \
		driver.o \
		message.o \
		message_dispatcher.o \
		notifier.o
INTERFACES =	
UICDECLS =	
UICIMPLS =	
SRCMOC	=	moc_driver.cpp \
		moc_notifier.cpp
OBJMOC	=	moc_driver.o \
		moc_notifier.o
DIST	=	
TARGET	=	liblaeufer.so
INTERFACE_DECL_PATH = .

####### Implicit rules

.SUFFIXES: .cpp .cxx .cc .C .c

.cpp.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.cxx.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.cc.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.C.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.c.o:
	$(CC) -c $(CFLAGS) $(INCPATH) -o $@ $<

####### Build rules


all: $(TARGET)

$(TARGET): $(UICDECLS) $(OBJECTS) $(OBJMOC) 
	$(LINK) $(LFLAGS) -o $(TARGET) $(OBJECTS) $(OBJMOC) $(LIBS)

moc: $(SRCMOC)

tmake:
	tmake liblaeufer.pro

dist:
	$(TAR) liblaeufer.tar liblaeufer.pro $(SOURCES) $(HEADERS) $(INTERFACES) $(DIST)
	$(GZIP) liblaeufer.tar

clean:
	-rm -f $(OBJECTS) $(OBJMOC) $(SRCMOC) $(UICIMPLS) $(UICDECLS) $(TARGET)
	-rm -f *~ core

####### Sub-libraries


###### Combined headers


####### Compile

bus_manager.o: bus_manager.cc \
		bus_manager.h \
		bus.h \
		include.h \
		message_dispatcher.h \
		message.h

driver.o: driver.cc \
		driver.h \
		bus_manager.h \
		bus.h \
		include.h \
		message_dispatcher.h \
		message.h

message.o: message.cc \
		message.h \
		include.h

message_dispatcher.o: message_dispatcher.cc \
		message_dispatcher.h \
		include.h \
		bus.h \
		driver.h \
		bus_manager.h \
		message.h

notifier.o: notifier.cc \
		notifier.h

moc_driver.o: moc_driver.cpp \
		driver.h

moc_notifier.o: moc_notifier.cpp \
		notifier.h

moc_driver.cpp: driver.h
	$(MOC) driver.h -o moc_driver.cpp

moc_notifier.cpp: notifier.h
	$(MOC) notifier.h -o moc_notifier.cpp

